/*
 * This file is generated by jOOQ.
 */
package ru.chsergeig.shoppy.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.chsergeig.shoppy.jooq.Keys;
import ru.chsergeig.shoppy.jooq.Public;
import ru.chsergeig.shoppy.jooq.tables.records.UserOrderRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserOrder extends TableImpl<UserOrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_order</code>
     */
    public static final UserOrder USER_ORDER = new UserOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserOrderRecord> getRecordType() {
        return UserOrderRecord.class;
    }

    /**
     * The column <code>public.user_order.user_id</code>.
     */
    public final TableField<UserOrderRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_order.order_id</code>.
     */
    public final TableField<UserOrderRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    private UserOrder(Name alias, Table<UserOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserOrder(Name alias, Table<UserOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_order</code> table reference
     */
    public UserOrder(String alias) {
        this(DSL.name(alias), USER_ORDER);
    }

    /**
     * Create an aliased <code>public.user_order</code> table reference
     */
    public UserOrder(Name alias) {
        this(alias, USER_ORDER);
    }

    /**
     * Create a <code>public.user_order</code> table reference
     */
    public UserOrder() {
        this(DSL.name("user_order"), null);
    }

    public <O extends Record> UserOrder(Table<O> child, ForeignKey<O, UserOrderRecord> key) {
        super(child, key, USER_ORDER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UserOrderRecord, Integer> getIdentity() {
        return (Identity<UserOrderRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<ForeignKey<UserOrderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserOrderRecord, ?>>asList(Keys.USER_ORDER__USER_ORDER_ORDER_ID_FKEY);
    }

    private transient Order _order;

    public Order order() {
        if (_order == null)
            _order = new Order(this, Keys.USER_ORDER__USER_ORDER_ORDER_ID_FKEY);

        return _order;
    }

    @Override
    public UserOrder as(String alias) {
        return new UserOrder(DSL.name(alias), this);
    }

    @Override
    public UserOrder as(Name alias) {
        return new UserOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOrder rename(String name) {
        return new UserOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserOrder rename(Name name) {
        return new UserOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
