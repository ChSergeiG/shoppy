/*
 * This file is generated by jOOQ.
 */
package ru.chsergeig.shoppy.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.chsergeig.shoppy.jooq.Keys;
import ru.chsergeig.shoppy.jooq.Public;
import ru.chsergeig.shoppy.jooq.enums.Status;
import ru.chsergeig.shoppy.jooq.tables.records.GoodRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Good extends TableImpl<GoodRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.good</code>
     */
    public static final Good GOOD = new Good();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GoodRecord> getRecordType() {
        return GoodRecord.class;
    }

    /**
     * The column <code>public.good.id</code>.
     */
    public final TableField<GoodRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.good.name</code>.
     */
    public final TableField<GoodRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.good.article</code>.
     */
    public final TableField<GoodRecord, Integer> ARTICLE = createField(DSL.name("article"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.good.status</code>.
     */
    public final TableField<GoodRecord, Status> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'ADDED'::status", SQLDataType.VARCHAR)).asEnumDataType(ru.chsergeig.shoppy.jooq.enums.Status.class), this, "");

    private Good(Name alias, Table<GoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private Good(Name alias, Table<GoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.good</code> table reference
     */
    public Good(String alias) {
        this(DSL.name(alias), GOOD);
    }

    /**
     * Create an aliased <code>public.good</code> table reference
     */
    public Good(Name alias) {
        this(alias, GOOD);
    }

    /**
     * Create a <code>public.good</code> table reference
     */
    public Good() {
        this(DSL.name("good"), null);
    }

    public <O extends Record> Good(Table<O> child, ForeignKey<O, GoodRecord> key) {
        super(child, key, GOOD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<GoodRecord, Integer> getIdentity() {
        return (Identity<GoodRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<GoodRecord> getPrimaryKey() {
        return Keys.GOOD_PK;
    }

    @Override
    public List<UniqueKey<GoodRecord>> getKeys() {
        return Arrays.<UniqueKey<GoodRecord>>asList(Keys.GOOD_PK);
    }

    @Override
    public Good as(String alias) {
        return new Good(DSL.name(alias), this);
    }

    @Override
    public Good as(Name alias) {
        return new Good(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Good rename(String name) {
        return new Good(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Good rename(Name name) {
        return new Good(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Status> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
