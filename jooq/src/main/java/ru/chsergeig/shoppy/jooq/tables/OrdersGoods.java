/*
 * This file is generated by jOOQ.
 */
package ru.chsergeig.shoppy.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.chsergeig.shoppy.jooq.Keys;
import ru.chsergeig.shoppy.jooq.Public;
import ru.chsergeig.shoppy.jooq.tables.records.OrdersGoodsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersGoods extends TableImpl<OrdersGoodsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.orders_goods</code>
     */
    public static final OrdersGoods ORDERS_GOODS = new OrdersGoods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersGoodsRecord> getRecordType() {
        return OrdersGoodsRecord.class;
    }

    /**
     * The column <code>public.orders_goods.order_id</code>.
     */
    public final TableField<OrdersGoodsRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.orders_goods.good_id</code>.
     */
    public final TableField<OrdersGoodsRecord, Integer> GOOD_ID = createField(DSL.name("good_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    private OrdersGoods(Name alias, Table<OrdersGoodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersGoods(Name alias, Table<OrdersGoodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.orders_goods</code> table reference
     */
    public OrdersGoods(String alias) {
        this(DSL.name(alias), ORDERS_GOODS);
    }

    /**
     * Create an aliased <code>public.orders_goods</code> table reference
     */
    public OrdersGoods(Name alias) {
        this(alias, ORDERS_GOODS);
    }

    /**
     * Create a <code>public.orders_goods</code> table reference
     */
    public OrdersGoods() {
        this(DSL.name("orders_goods"), null);
    }

    public <O extends Record> OrdersGoods(Table<O> child, ForeignKey<O, OrdersGoodsRecord> key) {
        super(child, key, ORDERS_GOODS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrdersGoodsRecord, Integer> getIdentity() {
        return (Identity<OrdersGoodsRecord, Integer>) super.getIdentity();
    }

    @Override
    public List<ForeignKey<OrdersGoodsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDERS_GOODS__ORDERS_GOODS_ORDER_ID_FKEY, Keys.ORDERS_GOODS__ORDERS_GOODS_GOOD_ID_FKEY);
    }

    private transient Orders _orders;
    private transient Goods _goods;

    /**
     * Get the implicit join path to the <code>public.orders</code> table.
     */
    public Orders orders() {
        if (_orders == null)
            _orders = new Orders(this, Keys.ORDERS_GOODS__ORDERS_GOODS_ORDER_ID_FKEY);

        return _orders;
    }

    /**
     * Get the implicit join path to the <code>public.goods</code> table.
     */
    public Goods goods() {
        if (_goods == null)
            _goods = new Goods(this, Keys.ORDERS_GOODS__ORDERS_GOODS_GOOD_ID_FKEY);

        return _goods;
    }

    @Override
    public OrdersGoods as(String alias) {
        return new OrdersGoods(DSL.name(alias), this);
    }

    @Override
    public OrdersGoods as(Name alias) {
        return new OrdersGoods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersGoods rename(String name) {
        return new OrdersGoods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersGoods rename(Name name) {
        return new OrdersGoods(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
