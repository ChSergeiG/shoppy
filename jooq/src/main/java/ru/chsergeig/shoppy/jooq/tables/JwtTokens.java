/*
 * This file is generated by jOOQ.
 */
package ru.chsergeig.shoppy.jooq.tables;


import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.chsergeig.shoppy.jooq.Public;
import ru.chsergeig.shoppy.jooq.enums.Status;
import ru.chsergeig.shoppy.jooq.tables.records.JwtTokensRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JwtTokens extends TableImpl<JwtTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jwt_tokens</code>
     */
    public static final JwtTokens JWT_TOKENS = new JwtTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JwtTokensRecord> getRecordType() {
        return JwtTokensRecord.class;
    }

    /**
     * The column <code>public.jwt_tokens.token</code>. Token sha256
     */
    public final TableField<JwtTokensRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.field("''::character varying", SQLDataType.VARCHAR)), this, "Token sha256");

    /**
     * The column <code>public.jwt_tokens.valid_until</code>. Token expiration
     * date
     */
    public final TableField<JwtTokensRecord, OffsetDateTime> VALID_UNTIL = createField(DSL.name("valid_until"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "Token expiration date");

    /**
     * The column <code>public.jwt_tokens.status</code>. Token status
     */
    public final TableField<JwtTokensRecord, Status> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).defaultValue(DSL.field("'ADDED'::status", SQLDataType.VARCHAR)).asEnumDataType(ru.chsergeig.shoppy.jooq.enums.Status.class), this, "Token status");

    private JwtTokens(Name alias, Table<JwtTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private JwtTokens(Name alias, Table<JwtTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.jwt_tokens</code> table reference
     */
    public JwtTokens(String alias) {
        this(DSL.name(alias), JWT_TOKENS);
    }

    /**
     * Create an aliased <code>public.jwt_tokens</code> table reference
     */
    public JwtTokens(Name alias) {
        this(alias, JWT_TOKENS);
    }

    /**
     * Create a <code>public.jwt_tokens</code> table reference
     */
    public JwtTokens() {
        this(DSL.name("jwt_tokens"), null);
    }

    public <O extends Record> JwtTokens(Table<O> child, ForeignKey<O, JwtTokensRecord> key) {
        super(child, key, JWT_TOKENS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public JwtTokens as(String alias) {
        return new JwtTokens(DSL.name(alias), this);
    }

    @Override
    public JwtTokens as(Name alias) {
        return new JwtTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JwtTokens rename(String name) {
        return new JwtTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JwtTokens rename(Name name) {
        return new JwtTokens(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, OffsetDateTime, Status> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
