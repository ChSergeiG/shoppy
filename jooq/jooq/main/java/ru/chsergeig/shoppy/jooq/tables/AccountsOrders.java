/*
 * This file is generated by jOOQ.
 */
package ru.chsergeig.shoppy.jooq.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import ru.chsergeig.shoppy.jooq.Keys;
import ru.chsergeig.shoppy.jooq.Public;
import ru.chsergeig.shoppy.jooq.tables.records.AccountsOrdersRecord;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsOrders extends TableImpl<AccountsOrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.accounts_orders</code>
     */
    public static final AccountsOrders ACCOUNTS_ORDERS = new AccountsOrders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsOrdersRecord> getRecordType() {
        return AccountsOrdersRecord.class;
    }

    /**
     * The column <code>public.accounts_orders.account_id</code>. User id
     */
    public final TableField<AccountsOrdersRecord, Integer> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "User id");

    /**
     * The column <code>public.accounts_orders.order_id</code>. Order id
     */
    public final TableField<AccountsOrdersRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "Order id");

    private AccountsOrders(Name alias, Table<AccountsOrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsOrders(Name alias, Table<AccountsOrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.accounts_orders</code> table reference
     */
    public AccountsOrders(String alias) {
        this(DSL.name(alias), ACCOUNTS_ORDERS);
    }

    /**
     * Create an aliased <code>public.accounts_orders</code> table reference
     */
    public AccountsOrders(Name alias) {
        this(alias, ACCOUNTS_ORDERS);
    }

    /**
     * Create a <code>public.accounts_orders</code> table reference
     */
    public AccountsOrders() {
        this(DSL.name("accounts_orders"), null);
    }

    public <O extends Record> AccountsOrders(Table<O> child, ForeignKey<O, AccountsOrdersRecord> key) {
        super(child, key, ACCOUNTS_ORDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<AccountsOrdersRecord, Integer> getIdentity() {
        return (Identity<AccountsOrdersRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountsOrdersRecord> getPrimaryKey() {
        return Keys.ACCOUNT_ID_ORDER_ID_PK;
    }

    @Override
    public List<UniqueKey<AccountsOrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsOrdersRecord>>asList(Keys.ACCOUNT_ID_ORDER_ID_PK);
    }

    @Override
    public List<ForeignKey<AccountsOrdersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsOrdersRecord, ?>>asList(Keys.ACCOUNTS_ORDERS__ACCOUNTS_ORDERS_ORDER_ID_FKEY);
    }

    private transient Orders _orders;

    public Orders orders() {
        if (_orders == null)
            _orders = new Orders(this, Keys.ACCOUNTS_ORDERS__ACCOUNTS_ORDERS_ORDER_ID_FKEY);

        return _orders;
    }

    @Override
    public AccountsOrders as(String alias) {
        return new AccountsOrders(DSL.name(alias), this);
    }

    @Override
    public AccountsOrders as(Name alias) {
        return new AccountsOrders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsOrders rename(String name) {
        return new AccountsOrders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsOrders rename(Name name) {
        return new AccountsOrders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
