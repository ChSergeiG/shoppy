/*
 * This file is generated by jOOQ.
 */
package ru.chsergeig.shoppy.jooq.tables.daos;


import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import ru.chsergeig.shoppy.jooq.enums.Status;
import ru.chsergeig.shoppy.jooq.tables.Accounts;
import ru.chsergeig.shoppy.jooq.tables.records.AccountsRecord;

import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsDao extends DAOImpl<AccountsRecord, ru.chsergeig.shoppy.jooq.tables.pojos.Accounts, Integer> {

    /**
     * Create a new AccountsDao without any configuration
     */
    public AccountsDao() {
        super(Accounts.ACCOUNTS, ru.chsergeig.shoppy.jooq.tables.pojos.Accounts.class);
    }

    /**
     * Create a new AccountsDao with an attached configuration
     */
    public AccountsDao(Configuration configuration) {
        super(Accounts.ACCOUNTS, ru.chsergeig.shoppy.jooq.tables.pojos.Accounts.class, configuration);
    }

    @Override
    public Integer getId(ru.chsergeig.shoppy.jooq.tables.pojos.Accounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchById(Integer... values) {
        return fetch(Accounts.ACCOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ru.chsergeig.shoppy.jooq.tables.pojos.Accounts fetchOneById(Integer value) {
        return fetchOne(Accounts.ACCOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>login BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchRangeOfLogin(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.LOGIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login IN (values)</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchByLogin(String... values) {
        return fetch(Accounts.ACCOUNTS.LOGIN, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchByPassword(String... values) {
        return fetch(Accounts.ACCOUNTS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>salted BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchRangeOfSalted(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.SALTED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>salted IN (values)</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchBySalted(Boolean... values) {
        return fetch(Accounts.ACCOUNTS.SALTED, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchRangeOfStatus(Status lowerInclusive, Status upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<ru.chsergeig.shoppy.jooq.tables.pojos.Accounts> fetchByStatus(Status... values) {
        return fetch(Accounts.ACCOUNTS.STATUS, values);
    }
}
