/*
 * This file is generated by jOOQ.
 */
package ru.chsergeig.shoppy.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import ru.chsergeig.shoppy.jooq.enums.Status;
import ru.chsergeig.shoppy.jooq.tables.Orders;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersRecord extends UpdatableRecordImpl<OrdersRecord> implements Record4<Integer, String, Status, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.orders.id</code>.
     */
    public OrdersRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.orders.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.orders.info</code>. Info about order
     */
    public OrdersRecord setInfo(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.orders.info</code>. Info about order
     */
    public String getInfo() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.orders.status</code>. Order status
     */
    public OrdersRecord setStatus(Status value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.orders.status</code>. Order status
     */
    public Status getStatus() {
        return (Status) get(2);
    }

    /**
     * Setter for <code>public.orders.guid</code>. Unique order guid
     */
    public OrdersRecord setGuid(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.orders.guid</code>. Unique order guid
     */
    public String getGuid() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Status, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Status, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Orders.ORDERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Orders.ORDERS.INFO;
    }

    @Override
    public Field<Status> field3() {
        return Orders.ORDERS.STATUS;
    }

    @Override
    public Field<String> field4() {
        return Orders.ORDERS.GUID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getInfo();
    }

    @Override
    public Status component3() {
        return getStatus();
    }

    @Override
    public String component4() {
        return getGuid();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getInfo();
    }

    @Override
    public Status value3() {
        return getStatus();
    }

    @Override
    public String value4() {
        return getGuid();
    }

    @Override
    public OrdersRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public OrdersRecord value2(String value) {
        setInfo(value);
        return this;
    }

    @Override
    public OrdersRecord value3(Status value) {
        setStatus(value);
        return this;
    }

    @Override
    public OrdersRecord value4(String value) {
        setGuid(value);
        return this;
    }

    @Override
    public OrdersRecord values(Integer value1, String value2, Status value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OrdersRecord
     */
    public OrdersRecord() {
        super(Orders.ORDERS);
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    public OrdersRecord(Integer id, String info, Status status, String guid) {
        super(Orders.ORDERS);

        setId(id);
        setInfo(info);
        setStatus(status);
        setGuid(guid);
    }
}
